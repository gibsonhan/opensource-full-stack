{"ast":null,"code":"var _jsxFileName = \"/home/gibby/opensource-full-stack/part6_tutorial/react-redux/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'; //reducer\n\nconst counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    case 'ZERO':\n      return 0;\n\n    default:\n      //if action typ not valid return state\n      return state;\n  }\n};\n\nconst store = createStore(counterReducer);\nconsole.log(store.getState());\nstore.dispatch({\n  type: 'INCREMENT'\n});\nstore.dispatch({\n  type: 'INCREMENT'\n});\nstore.dispatch({\n  type: 'INCREMENT'\n});\nconsole.log(store.getState());\nstore.dispatch({\n  type: 'ZERO'\n});\nstore.dispatch({\n  type: 'DECREMENT'\n});\nconsole.log(store.getState());\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Hello\"));\n};\n/**\n *  Action -> are object -> contain atleast one type of action\n *         -> if data is involved  more field\n * \n *  Reducer -> impact/outcome of action -> fcn -> returns the curr state as param\n *          -> returns a new state\n *          -> never call reducer directly from app code\n *          -> only given as param to createSotre function\n * \n * Stores -> use reducers to handle action,\n *        -> dispatch method :: which are dispatch/sent to store w/ dispath method\n *        -> getState method :: finding the state of the store with\n *        -> subsribe method :: reacll fcn used by store -> when state is changed\n * {\n *      type: 'INCREMENT'\n *  }\n */\n\n\nconst renderApp = () => {\n  ReactDOM.render(React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), document.getElementById('root'));\n};\n\nrenderApp();\nstore.subscribe(renderApp);","map":{"version":3,"sources":["/home/gibby/opensource-full-stack/part6_tutorial/react-redux/src/index.js"],"names":["React","ReactDOM","createStore","counterReducer","state","action","type","store","console","log","getState","dispatch","App","renderApp","render","document","getElementById","subscribe"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CAEA;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,WAAL;AACI,aAAOF,KAAK,GAAG,CAAf;;AACJ,SAAK,WAAL;AACI,aAAOA,KAAK,GAAE,CAAd;;AACJ,SAAK,MAAL;AACI,aAAO,CAAP;;AACJ;AAAS;AACL,aAAOA,KAAP;AARR;AAUH,CAXD;;AAaA,MAAMG,KAAK,GAAGL,WAAW,CAACC,cAAD,CAAzB;AACAK,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ;AACAH,KAAK,CAACI,QAAN,CAAe;AAACL,EAAAA,IAAI,EAAE;AAAP,CAAf;AACAC,KAAK,CAACI,QAAN,CAAe;AAACL,EAAAA,IAAI,EAAE;AAAP,CAAf;AACAC,KAAK,CAACI,QAAN,CAAe;AAACL,EAAAA,IAAI,EAAE;AAAP,CAAf;AACAE,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ;AACAH,KAAK,CAACI,QAAN,CAAe;AAACL,EAAAA,IAAI,EAAE;AAAP,CAAf;AACAC,KAAK,CAACI,QAAN,CAAe;AAACL,EAAAA,IAAI,EAAE;AAAP,CAAf;AACAE,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ;;AAGA,MAAME,GAAG,GAAG,MAAM;AACd,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CADJ;AAKH,CAND;AAOA;;;;;;;;;;;;;;;;;;;AAiBA,MAAMC,SAAS,GAAG,MAAM;AACpBZ,EAAAA,QAAQ,CAACa,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AACH,CAFD;;AAIAH,SAAS;AACTN,KAAK,CAACU,SAAN,CAAgBJ,SAAhB","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\n\n//reducer\nconst counterReducer = (state = 0, action) => {\n    switch(action.type) {\n        case 'INCREMENT':\n            return state + 1\n        case 'DECREMENT': \n            return state -1\n        case 'ZERO':\n            return 0\n        default: //if action typ not valid return state\n            return state\n    }\n}\n\nconst store = createStore(counterReducer)\nconsole.log(store.getState())\nstore.dispatch({type: 'INCREMENT'})\nstore.dispatch({type: 'INCREMENT'})\nstore.dispatch({type: 'INCREMENT'})\nconsole.log(store.getState())\nstore.dispatch({type: 'ZERO'})\nstore.dispatch({type: 'DECREMENT'})\nconsole.log(store.getState())\n\n\nconst App = () => {\n    return (\n        <div>\n            <h1>Hello</h1>\n        </div>\n    )\n}\n/**\n *  Action -> are object -> contain atleast one type of action\n *         -> if data is involved  more field\n * \n *  Reducer -> impact/outcome of action -> fcn -> returns the curr state as param\n *          -> returns a new state\n *          -> never call reducer directly from app code\n *          -> only given as param to createSotre function\n * \n * Stores -> use reducers to handle action,\n *        -> dispatch method :: which are dispatch/sent to store w/ dispath method\n *        -> getState method :: finding the state of the store with\n *        -> subsribe method :: reacll fcn used by store -> when state is changed\n * {\n *      type: 'INCREMENT'\n *  }\n */\nconst renderApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'))\n}\n\nrenderApp()\nstore.subscribe(renderApp)\n\n\n"]},"metadata":{},"sourceType":"module"}