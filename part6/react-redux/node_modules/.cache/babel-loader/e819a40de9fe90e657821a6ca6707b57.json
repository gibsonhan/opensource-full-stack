{"ast":null,"code":"var _jsxFileName = \"/home/gibby/opensource-full-stack/part6_tutorial/react-redux/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'; //reducer\n\nconst counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    case 'ZERO':\n      return 0;\n\n    default:\n      //if action typ not valid return state\n      return state;\n  }\n};\n\nconst store = createStore(counterReducer);\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Hello\"));\n};\n/**\n *  Action -> are object -> contain atleast one type of action\n *         -> if data is involved  more field\n * \n *  Reducer -> impact/outcome of action -> fcn -> returns the curr state as param\n *          -> returns a new state\n *          -> never call reducer directly from app code\n *          -> only given as param to createSotre function\n * {\n *      type: 'INCREMENT'\n *  }\n */\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/gibby/opensource-full-stack/part6_tutorial/react-redux/src/index.js"],"names":["React","ReactDOM","createStore","counterReducer","state","action","type","store","App","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CAEA;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,WAAL;AACI,aAAOF,KAAK,GAAG,CAAf;;AACJ,SAAK,WAAL;AACI,aAAOA,KAAK,GAAE,CAAd;;AACJ,SAAK,MAAL;AACI,aAAO,CAAP;;AACJ;AAAS;AACL,aAAOA,KAAP;AARR;AAUH,CAXD;;AAaA,MAAMG,KAAK,GAAGL,WAAW,CAACC,cAAD,CAAzB;;AAEA,MAAMK,GAAG,GAAG,MAAM;AACd,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CADJ;AAKH,CAND;AAOA;;;;;;;;;;;;;;AAYAP,QAAQ,CAACQ,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\n\n//reducer\nconst counterReducer = (state = 0, action) => {\n    switch(action.type) {\n        case 'INCREMENT':\n            return state + 1\n        case 'DECREMENT': \n            return state -1\n        case 'ZERO':\n            return 0\n        default: //if action typ not valid return state\n            return state\n    }\n}\n\nconst store = createStore(counterReducer)\n\nconst App = () => {\n    return (\n        <div>\n            <h1>Hello</h1>\n        </div>\n    )\n}\n/**\n *  Action -> are object -> contain atleast one type of action\n *         -> if data is involved  more field\n * \n *  Reducer -> impact/outcome of action -> fcn -> returns the curr state as param\n *          -> returns a new state\n *          -> never call reducer directly from app code\n *          -> only given as param to createSotre function\n * {\n *      type: 'INCREMENT'\n *  }\n */\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}